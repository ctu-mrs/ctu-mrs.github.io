"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const globby_1 = __importDefault(require("globby"));
const fp_1 = require("lodash/fp");
const lunr_1 = __importDefault(require("lunr"));
const path_1 = __importDefault(require("path"));
const env_1 = __importDefault(require("./env"));
const metadata_1 = __importDefault(require("./metadata"));
const DEFAULT_OPTIONS = {
    include: ['**/*.{md,mdx}'],
    path: 'docs',
    routeBasePath: 'docs',
};
function pluginContentLunr(context, opts) {
    const options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), opts);
    const { siteDir } = context;
    const docsDir = path_1.default.resolve(siteDir, options.path);
    // Versioning
    const env = env_1.default(siteDir);
    const { versioning } = env;
    const { versions, docsDir: versionedDir } = versioning;
    const versionsNames = versions.map(version => `version-${version}`);
    return {
        name: 'docusaurus-plugin-lunr',
        getThemePath() {
            return path_1.default.resolve(__dirname, '../theme');
        },
        // tslint:disable-next-line: readonly-array
        getPathsToWatch() {
            const { include } = options;
            const globPattern = include.map(pattern => `${docsDir}/${pattern}`);
            const versionGlobPattern = (!versioning.enabled) ? [] : fp_1.flatten(include.map(p => versionsNames.map(v => `${versionedDir}/${v}/${p}`)));
            return [...globPattern, ...versionGlobPattern];
        },
        async loadContent() {
            const { include } = options;
            // tslint:disable-next-line: no-if-statement
            if (!fs_extra_1.default.existsSync(docsDir)) {
                return null;
            }
            // Metadata for default/ master docs files.
            const docsFiles = await globby_1.default(include, { cwd: docsDir });
            const docsPromises = docsFiles.map(async (source) => metadata_1.default({
                context,
                env,
                options,
                refDir: docsDir,
                source,
            }));
            // Metadata for versioned docs
            const versionedGlob = fp_1.flatten(include.map(p => versionsNames.map(v => `${v}/${p}`)));
            const versionedFiles = await globby_1.default(versionedGlob, { cwd: versionedDir });
            const versionPromises = (!versioning.enabled) ? [] : versionedFiles.map(async (source) => metadata_1.default({
                context,
                env,
                options,
                refDir: versionedDir,
                source,
            }));
            const metadata = await Promise.all([...docsPromises, ...versionPromises]);
            return ({ metadata });
        },
        contentLoaded({ content, actions }) {
            const { metadata = [] } = content;
            const { createData } = actions;
            // tslint:disable: no-expression-statement no-this typedef
            const index = lunr_1.default(function () {
                this.ref('route');
                this.field('title');
                this.field('content');
                this.field('version');
                metadata.forEach(function ({ permalink, title, version, plaintext }) {
                    this.add({
                        content: plaintext,
                        route: permalink,
                        title,
                        version
                    });
                }, this);
                // tslint:enable: no-expression-statement no-this typedef
            });
            const documents = metadata.map(({ permalink: route, title, version }) => ({ route, title, version }));
            // tslint:disable-next-line: no-expression-statement
            createData('search-index.json', JSON.stringify({ index, documents }, null, 2));
        }
    };
}
exports.default = pluginContentLunr;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx3REFBMEI7QUFDMUIsb0RBQTRCO0FBQzVCLGtDQUFvQztBQUNwQyxnREFBd0I7QUFDeEIsZ0RBQXdCO0FBR3hCLGdEQUE0QjtBQUM1QiwwREFBeUM7QUFHekMsTUFBTSxlQUFlLEdBQWtCO0lBQ3JDLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUMxQixJQUFJLEVBQUUsTUFBTTtJQUNaLGFBQWEsRUFBRSxNQUFNO0NBQ3RCLENBQUM7QUFFRixTQUF3QixpQkFBaUIsQ0FDdkMsT0FBb0IsRUFDcEIsSUFBNEI7SUFFNUIsTUFBTSxPQUFPLG1DQUFRLGVBQWUsR0FBSyxJQUFJLENBQUUsQ0FBQztJQUNoRCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQzVCLE1BQU0sT0FBTyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwRCxhQUFhO0lBQ2IsTUFBTSxHQUFHLEdBQVEsYUFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDM0IsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsVUFBVSxDQUFDO0lBQ3ZELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFcEUsT0FBTztRQUNMLElBQUksRUFBRSx3QkFBd0I7UUFFOUIsWUFBWTtZQUNWLE9BQU8sY0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELDJDQUEyQztRQUMzQyxlQUFlO1lBQ2Is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