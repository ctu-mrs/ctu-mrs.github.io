"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const remove_markdown_1 = __importDefault(require("remove-markdown"));
const striptags_1 = __importDefault(require("striptags"));
function inferVersion(dirName, versions) {
    const maybeVersion = dirName.split('/', 1).shift();
    const inferredVersion = maybeVersion ? maybeVersion.replace(/^version-/, '') : null;
    return inferredVersion && versions.includes(inferredVersion) ? inferredVersion : null;
}
function versionFromSource(dirName, versions) {
    return /^version-/.test(dirName) ? inferVersion(dirName, versions) : 'next';
}
async function processMetadata({ source, refDir, context, options, env, }) {
    const { routeBasePath } = options;
    const { siteDir, baseUrl } = context;
    const { versioning } = env;
    const dirName = path_1.default.dirname(source);
    const filePath = path_1.default.join(refDir, source);
    const fileStringPromise = fs_extra_1.default.readFile(filePath, 'utf-8');
    const version = (versioning.enabled) ? versionFromSource(dirName, versioning.versions) : null;
    // The version portion of the url path. Eg: 'next', '1.0.0', and ''
    const versionPath = version && version !== versioning.latestVersion ? version : '';
    const contents = await fileStringPromise;
    const plaintext = remove_markdown_1.default(striptags_1.default(contents));
    const { frontMatter = {}, excerpt } = utils_1.parseMarkdownString(contents);
    const baseID = frontMatter.id || path_1.default.basename(source, path_1.default.extname(source));
    // tslint:disable-next-line: no-if-statement
    if (baseID.includes('/')) {
        throw new Error('Document id cannot include "/".');
    }
    // tslint:enable no-if-statement
    // Append subdirectory as part of id.
    const id = dirName !== '.' ? `${dirName}/${baseID}` : baseID;
    const title = frontMatter.title || baseID;
    const description = frontMatter.description || excerpt;
    // The last portion of the url path. Eg: 'foo/bar', 'bar'
    const routePath = version && version !== 'next'
        ? id.replace(new RegExp(`^version-${version}/`), '')
        : id;
    const permalink = utils_1.normalizeUrl([
        baseUrl,
        routeBasePath,
        versionPath,
        routePath,
    ]);
    const metadata = {
        description,
        id,
        permalink,
        plaintext,
        source: utils_1.aliasedSitePath(filePath, siteDir),
        title,
        version,
    };
    return metadata;
}
exports.default = processMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL21ldGFkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQXVGO0FBQ3ZGLHdEQUEwQjtBQUMxQixnREFBd0I7QUFDeEIsc0VBQXVDO0FBQ3ZDLDBEQUFrQztBQUlsQyxTQUFTLFlBQVksQ0FBQyxPQUFlLEVBQUUsUUFBK0I7SUFDcEUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkQsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BGLE9BQU8sZUFBZSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3hGLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE9BQWUsRUFBRSxRQUErQjtJQUN6RSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM5RSxDQUFDO0FBRWMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxFQUM1QyxNQUFNLEVBQ04sTUFBTSxFQUNOLE9BQU8sRUFDUCxPQUFPLEVBQ1AsR0FBRyxHQUNKO0lBQ0MsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNsQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUNyQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBRTNCLE1BQU0sT0FBTyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsTUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsTUFBTSxpQkFBaUIsR0FBRyxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFekQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUU5RixtRUFBbUU7SUFDbkUsTUFBTSxXQUFXLEdBQUcsT0FBTyxJQUFJLE9BQU8sS0FBSyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUVuRixNQUFNLFFBQVEsR0FBRyxNQUFNLGlCQUFpQixDQUFDO0lBQ3pDLE1BQU0sU0FBUyxHQUFHLHlCQUFRLENBQUMsbUJBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sRUFBRSxXQUFXLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLDJCQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxFQUFFLElBQUksY0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdFLDRDQUE0QztJQUM1QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsZ0NBQWdDO0lBRWhDLHFDQUFxQztJQUNyQyxNQUFNLEVBQUUsR0FBRyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBRTdELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQzFDLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDO0lBRXZELHlEQUF5RDtJQUN6RCxNQUFNLFNBQVMsR0FDYixPQUFPLElBQUksT0FBTyxLQUFLLE1BQU07UUFDM0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNwRCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1QsTUFBTSxTQUFTLEdBQUcsb0JBQVksQ0FBQztRQUM3QixPQUFPO1FBQ1AsYUFBYTtRQUNiLFdBQVc7UUFDWCxTQUFTO0tBQ1YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQWdCO1FBQzVCLFdBQVc7UUFDWCxFQUFFO1FBQ0YsU0FBUztRQUNULFNBQVM7UUFDVCxNQUFNLEVBQUUsdUJBQWUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO1FBQzFDLEtBQUs7UUFDTCxPQUFPO0tBQ1IsQ0FBQztJQUVGLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUE1REQsa0NBNERDIn0=